local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local API_CONFIG = {
    BASE_URL = "https://caythueapi.onrender.com", 
    ENDPOINTS = {
        GET_ORDERS = "/api/orders/",
        CHECK_USER = "/api/check/"
    }
}

local GUI_CONFIG = {
    POSITION = UDim2.new(0, 10, 0, 10), 
    SIZE = UDim2.new(0, 350, 0, 200),
    BACKGROUND_COLOR = Color3.fromRGB(30, 30, 30),
    BACKGROUND_TRANSPARENCY = 0.4,
    TEXT_COLOR = Color3.fromRGB(255, 255, 255),
    ACCENT_COLOR = Color3.fromRGB(0, 162, 255),
    ACCENT_TRANSPARENCY = 0.3,
    SUCCESS_COLOR = Color3.fromRGB(46, 204, 113),
    ERROR_COLOR = Color3.fromRGB(231, 76, 60),
    DONE_COLOR = Color3.fromRGB(155, 89, 182)
}

-- T√¨m LocalPlayer b·∫±ng repeat until
local LocalPlayer
repeat
    LocalPlayer = Players.LocalPlayer
    task.wait(0.1)
until LocalPlayer

local PlayerGui = LocalPlayer:WaitForChild("PlayerGui", 10)
if not PlayerGui then
    warn("Kh√¥ng th·ªÉ t√¨m th·∫•y PlayerGui")
    return
end

-- Bi·∫øn l∆∞u tr·ªØ
local currentOrderData = nil
local completedOrders = {}
local isGUIVisible = false
local orderGUI = nil
local debounce = false
local SAVE_FILE = "OrderStatus_" .. LocalPlayer.Name .. ".json"

-- H√†m l∆∞u tr·∫°ng th√°i v√†o file
local function saveOrderStatus()
    local success, error = pcall(function()
        local data = {
            completedOrders = completedOrders,
            lastUpdate = os.time(),
            username = LocalPlayer.Name
        }
        local jsonData = game:GetService("HttpService"):JSONEncode(data)
        writefile(SAVE_FILE, jsonData)
    end)
    
    if not success then
        warn("L·ªói khi l∆∞u tr·∫°ng th√°i: " .. tostring(error))
    end
end

-- H√†m t·∫£i tr·∫°ng th√°i t·ª´ file
local function loadOrderStatus()
    local success, result = pcall(function()
        if isfile(SAVE_FILE) then
            local fileContent = readfile(SAVE_FILE)
            local data = game:GetService("HttpService"):JSONDecode(fileContent)
            return data
        end
        return nil
    end)
    
    if success and result then
        completedOrders = result.completedOrders or {}
        return result
    else
        completedOrders = {}
        return nil
    end
end

-- H√†m t·∫°o hash ƒë∆°n h√†ng ƒë·ªÉ theo d√µi thay ƒë·ªïi
local function createOrderHash(orders)
    if not orders or type(orders) ~= "table" or #orders == 0 then
        return ""
    end
    
    local orderString = ""
    for i, order in ipairs(orders) do
        orderString = orderString .. tostring(order)
    end
    
    -- T·∫°o hash ƒë∆°n gi·∫£n
    local hash = 0
    for i = 1, #orderString do
        hash = (hash * 31 + string.byte(orderString, i)) % 2147483647
    end
    
    return tostring(hash)
end

-- H√†m ki·ªÉm tra xem ƒë∆°n c√≥ thay ƒë·ªïi kh√¥ng
local function checkOrderChanges(newOrders)
    local newHash = createOrderHash(newOrders)
    local savedData = loadOrderStatus()
    
    if savedData and savedData.orderHash and savedData.orderHash ~= newHash then
        -- ƒê∆°n h√†ng ƒë√£ thay ƒë·ªïi, reset tr·∫°ng th√°i ho√†n th√†nh
        completedOrders = {}
        showNotification("üîÑ ƒê∆°n h√†ng ƒë√£ thay ƒë·ªïi", "Tr·∫°ng th√°i ho√†n th√†nh ƒë√£ ƒë∆∞·ª£c reset", GUI_CONFIG.ACCENT_COLOR)
    end
    
    -- L∆∞u hash m·ªõi
    local dataToSave = savedData or {}
    dataToSave.orderHash = newHash
    dataToSave.completedOrders = completedOrders
    dataToSave.lastUpdate = os.time()
    dataToSave.username = LocalPlayer.Name
    
    local success, error = pcall(function()
        local jsonData = game:GetService("HttpService"):JSONEncode(dataToSave)
        writefile(SAVE_FILE, jsonData)
    end)
end

-- H√†m ƒë√°nh d·∫•u ƒë∆°n ho√†n th√†nh
local function markOrderComplete(orderIndex)
    completedOrders[orderIndex] = true
    saveOrderStatus()
    
    -- C·∫≠p nh·∫≠t GUI
    if orderGUI then
        displayOrderInfo(currentOrderData)
    end
    
    showNotification("‚úÖ ƒê√£ ho√†n th√†nh", "ƒê∆°n s·ªë " .. orderIndex .. " ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh", GUI_CONFIG.SUCCESS_COLOR)
end

-- H√†m t·∫°o notification
local function showNotification(title, message, color)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = message;
        Duration = 3;
        Color = color or GUI_CONFIG.ACCENT_COLOR;
    })
end

-- H√†m g·ªçi API s·ª≠ d·ª•ng http_request
local function callAPI(endpoint, username)
    local success, response = pcall(function()
        return http_request({
            Url = API_CONFIG.BASE_URL .. endpoint .. username,
            Method = "GET",
            Headers = {
                ["user-agent"] = "RobloxOrderManager"
            }
        })
    end)
    
    if success and response and response.Success and response.Body then
        local decoded = game:GetService("HttpService"):JSONDecode(response.Body)
        return decoded
    else
        warn("L·ªói k·∫øt n·ªëi API: " .. (response and response.StatusMessage or tostring(response)))
        return nil
    end
end

local function createOrderGUI()
    if orderGUI then
        orderGUI:Destroy()
    end
    
    orderGUI = Instance.new("ScreenGui")
    orderGUI.Name = "BloxFruitOrderManager"
    orderGUI.ResetOnSpawn = false
    orderGUI.Parent = PlayerGui
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = GUI_CONFIG.SIZE
    mainFrame.Position = GUI_CONFIG.POSITION
    mainFrame.BackgroundColor3 = GUI_CONFIG.BACKGROUND_COLOR
    mainFrame.BackgroundTransparency = GUI_CONFIG.BACKGROUND_TRANSPARENCY
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = orderGUI
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 10)
    mainCorner.Parent = mainFrame
    
    -- Header
    local headerFrame = Instance.new("Frame")
    headerFrame.Name = "Header"
    headerFrame.Size = UDim2.new(1, 0, 0, 40)
    headerFrame.Position = UDim2.new(0, 0, 0, 0)
    headerFrame.BackgroundColor3 = GUI_CONFIG.ACCENT_COLOR
    headerFrame.BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY
    headerFrame.BorderSizePixel = 0
    headerFrame.Parent = mainFrame
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 10)
    headerCorner.Parent = headerFrame
    
    local headerFix = Instance.new("Frame")
    headerFix.Size = UDim2.new(1, 0, 0, 10)
    headerFix.Position = UDim2.new(0, 0, 1, -10)
    headerFix.BackgroundColor3 = GUI_CONFIG.ACCENT_COLOR
    headerFix.BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY
    headerFix.BorderSizePixel = 0
    headerFix.Parent = headerFrame
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -110, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "üéÆ ƒê∆°n C√†y Thu√™ - " .. LocalPlayer.Name
    titleLabel.TextColor3 = GUI_CONFIG.TEXT_COLOR
    titleLabel.TextScaled = true
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = headerFrame
    
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = GUI_CONFIG.ERROR_COLOR
    closeButton.BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY
    closeButton.Text = "‚úï"
    closeButton.TextColor3 = GUI_CONFIG.TEXT_COLOR
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.GothamBold
    closeButton.BorderSizePixel = 0
    closeButton.Parent = headerFrame
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 5)
    closeCorner.Parent = closeButton
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 30, 0, 30)
    toggleButton.Position = UDim2.new(1, -70, 0, 5)
    toggleButton.BackgroundColor3 = GUI_CONFIG.SUCCESS_COLOR
    toggleButton.BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY
    toggleButton.Text = "‚àí"
    toggleButton.TextColor3 = GUI_CONFIG.TEXT_COLOR
    toggleButton.TextScaled = true
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = headerFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 5)
    toggleCorner.Parent = toggleButton
    
    -- Khu v·ª±c n·ªôi dung
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -20, 1, -50)
    contentFrame.Position = UDim2.new(0, 10, 0, 45)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 5
    contentFrame.ScrollBarImageColor3 = GUI_CONFIG.ACCENT_COLOR
    contentFrame.Parent = mainFrame
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = contentFrame
    
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y)
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        orderGUI:Destroy()
        orderGUI = nil
        isGUIVisible = false
    end)
    
    local isMinimized = false
    toggleButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        local targetSize = isMinimized and UDim2.new(0, 350, 0, 45) or GUI_CONFIG.SIZE
        toggleButton.Text = isMinimized and "+" or "‚àí"
        
        local tween = TweenService:Create(mainFrame, 
            TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
            {Size = targetSize}
        )
        tween:Play()
    end)
    
    return contentFrame
end

function displayOrderInfo(orderData)
    local contentFrame = createOrderGUI()
    currentOrderData = orderData
    
    if not orderData or type(orderData) ~= "table" or not orderData.success or not orderData.orders or #orderData.orders == 0 then
        local noOrderLabel = Instance.new("TextLabel")
        noOrderLabel.Size = UDim2.new(1, 0, 0, 50)
        noOrderLabel.BackgroundColor3 = GUI_CONFIG.ERROR_COLOR
        noOrderLabel.BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY
        noOrderLabel.Text = "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n c√†y ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"
        noOrderLabel.TextColor3 = GUI_CONFIG.TEXT_COLOR
        noOrderLabel.TextScaled = true
        noOrderLabel.Font = Enum.Font.Gotham
        noOrderLabel.BorderSizePixel = 0
        noOrderLabel.Parent = contentFrame
        
        local noOrderCorner = Instance.new("UICorner")
        noOrderCorner.CornerRadius = UDim.new(0, 5)
        noOrderCorner.Parent = noOrderLabel
        
        return
    end
    
    local orders = orderData.orders or {}
    if type(orders) == "string" then
        orders = {orders}
    elseif type(orders) ~= "table" then
        orders = {}
    end
    
    -- Ki·ªÉm tra thay ƒë·ªïi ƒë∆°n h√†ng
    checkOrderChanges(orders)
    
    for i, order in ipairs(orders) do
        local isCompleted = completedOrders[i] or false
        
        local orderFrame = Instance.new("Frame")
        orderFrame.Size = UDim2.new(1, 0, 0, 80)
        orderFrame.BackgroundColor3 = isCompleted and GUI_CONFIG.DONE_COLOR or GUI_CONFIG.BACKGROUND_COLOR
        orderFrame.BackgroundTransparency = GUI_CONFIG.BACKGROUND_TRANSPARENCY
        orderFrame.BorderSizePixel = 0
        orderFrame.Parent = contentFrame
        
        local orderCorner = Instance.new("UICorner")
        orderCorner.CornerRadius = UDim.new(0, 5)
        orderCorner.Parent = orderFrame
        
        local orderNumber = Instance.new("TextLabel")
        orderNumber.Size = UDim2.new(0, 30, 0, 40)
        orderNumber.Position = UDim2.new(0, 5, 0, 0)
        orderNumber.BackgroundTransparency = 1
        orderNumber.Text = tostring(i)
        orderNumber.TextColor3 = GUI_CONFIG.ACCENT_COLOR
        orderNumber.TextScaled = true
        orderNumber.Font = Enum.Font.GothamBold
        orderNumber.Parent = orderFrame
        
        local orderText = Instance.new("TextLabel")
        orderText.Size = UDim2.new(1, -110, 0, 40)
        orderText.Position = UDim2.new(0, 35, 0, 0)
        orderText.BackgroundTransparency = 1
        orderText.Text = tostring(order)
        orderText.TextColor3 = GUI_CONFIG.TEXT_COLOR
        orderText.TextScaled = true
        orderText.TextXAlignment = Enum.TextXAlignment.Left
        orderText.Font = Enum.Font.Gotham
        orderText.TextWrapped = true
        orderText.Parent = orderFrame
        
        local statusLabel = Instance.new("TextLabel")
        statusLabel.Size = UDim2.new(1, -10, 0, 20)
        statusLabel.Position = UDim2.new(0, 5, 0, 45)
        statusLabel.BackgroundTransparency = 1
        statusLabel.Text = isCompleted and "‚úÖ ƒê√£ ho√†n th√†nh" or "‚è≥ Ch∆∞a ho√†n th√†nh"
        statusLabel.TextColor3 = isCompleted and GUI_CONFIG.SUCCESS_COLOR or GUI_CONFIG.ERROR_COLOR
        statusLabel.TextScaled = true
        statusLabel.TextXAlignment = Enum.TextXAlignment.Left
        statusLabel.Font = Enum.Font.GothamBold
        statusLabel.Parent = orderFrame
        
        local doneButton = Instance.new("TextButton")
        doneButton.Size = UDim2.new(0, 65, 0, 30)
        doneButton.Position = UDim2.new(1, -70, 0, 5)
        doneButton.BackgroundColor3 = isCompleted and GUI_CONFIG.SUCCESS_COLOR or GUI_CONFIG.DONE_COLOR
        doneButton.BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY
        doneButton.Text = isCompleted and "‚úÖ" or "Done"
        doneButton.TextColor3 = GUI_CONFIG.TEXT_COLOR
        doneButton.TextScaled = true
        doneButton.Font = Enum.Font.GothamBold
        doneButton.BorderSizePixel = 0
        doneButton.Active = not isCompleted
        doneButton.Parent = orderFrame
        
        local doneCorner = Instance.new("UICorner")
        doneCorner.CornerRadius = UDim.new(0, 5)
        doneCorner.Parent = doneButton
        
        if not isCompleted then
            doneButton.MouseButton1Click:Connect(function()
                markOrderComplete(i)
            end)
            
            -- Hi·ªáu ·ª©ng hover cho n√∫t Done
            doneButton.MouseEnter:Connect(function()
                local tween = TweenService:Create(doneButton,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundTransparency = 0.1}
                )
                tween:Play()
            end)
            
            doneButton.MouseLeave:Connect(function()
                local tween = TweenService:Create(doneButton,
                    TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundTransparency = GUI_CONFIG.ACCENT_TRANSPARENCY}
                )
                tween:Play()
            end)
        end
    end
end

local function checkAndDisplayOrders()
    if debounce then return end
    debounce = true
    
    local username = LocalPlayer.Name
    showNotification("üîÑ ƒêang t·∫£i", "ƒêang ki·ªÉm tra ƒë∆°n c√†y cho " .. username, GUI_CONFIG.ACCENT_COLOR)
    
    spawn(function()
        local orderData = callAPI(API_CONFIG.ENDPOINTS.GET_ORDERS, username)
        
        if orderData then
            if orderData.success then
                showNotification("‚úÖ Th√†nh c√¥ng", "ƒê√£ t√¨m th·∫•y ƒë∆°n c√†y!", GUI_CONFIG.SUCCESS_COLOR)
                displayOrderInfo(orderData)
                isGUIVisible = true
            else
                showNotification("‚ùå Kh√¥ng c√≥ ƒë∆°n", orderData.message or "Kh√¥ng t√¨m th·∫•y ƒë∆°n c√†y", GUI_CONFIG.ERROR_COLOR)
                displayOrderInfo(nil)
            end
        else
            showNotification("üîå L·ªói k·∫øt n·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server API", GUI_CONFIG.ERROR_COLOR)
            displayOrderInfo(nil)
        end
        
        wait(0.5)
        debounce = false
    end)
end

local function toggleGUI()
    if debounce then return end
    debounce = true
    
    if isGUIVisible and orderGUI then
        orderGUI:Destroy()
        orderGUI = nil
        isGUIVisible = false
    else
        checkAndDisplayOrders()
    end
    
    wait(0.5)
    debounce = false
end

-- T·∫£i tr·∫°ng th√°i ƒë√£ l∆∞u khi script kh·ªüi ƒë·ªông
loadOrderStatus()

wait(2) 
checkAndDisplayOrders()

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.F4 then
        toggleGUI()
    elseif input.KeyCode == Enum.KeyCode.F10 then
        checkAndDisplayOrders() 
    end
end)

showNotification("üéÆ Script ƒê√£ Kh·ªüi ƒê·ªông!", "F4: B·∫≠t/T·∫Øt GUI | F10: L√†m m·ªõi ƒë∆°n h√†ng", GUI_CONFIG.SUCCESS_COLOR)
